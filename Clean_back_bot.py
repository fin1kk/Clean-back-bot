import telebot
from telebot import types
from rembg import new_session, remove
from PIL import Image
import io
import os
import logging
import config

bot = telebot.TeleBot(config.BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ —Ñ–æ–Ω–∞ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞)
def get_inline_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data='change_model'))
    markup.add(types.InlineKeyboardButton("üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω", callback_data='upload_bg'))
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ inline
@bot.callback_query_handler(func=lambda call: call.data in ['change_model', 'upload_bg'])
def handle_callback(call):
    if call.data == 'change_model':
        choose_model(call.message)
    elif call.data == 'upload_bg':
        bot.send_message(call.message.chat.id, "üì§ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é '–§–æ–Ω'.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –∏ —è –∑–∞–º–µ–Ω—é —Ñ–æ–Ω.\n"
        "–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å 'u2net'. –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ —Ç–∞–∫–∏–º –∫–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
        reply_markup=get_inline_keyboard()
    )





#=================== –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ ===================

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_model_choice = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–¥–æ–≤ –º–æ–¥–µ–ª–µ–π
def choose_model(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for model in config.AVAILABLE_MODELS:
        markup.add(types.KeyboardButton(model))
    bot.send_message(
        message.chat.id,
        "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, set_user_model)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def set_user_model(message):
    model_key = message.text.strip().lower()
    if model_key in config.AVAILABLE_MODELS:
        user_model_choice[message.from_user.id] = config.AVAILABLE_MODELS[model_key]
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_key}",
            reply_markup=get_inline_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –¢–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /model",
            reply_markup=types.ReplyKeyboardRemove()
        )






#=================== –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ ===================

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ–Ω–æ–≤
os.makedirs("user_backgrounds", exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def check_image_constraints(image_bytes):
    if len(image_bytes) > config.MAX_FILE_SIZE_MB * 1024 * 1024:
        return f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî {config.MAX_FILE_SIZE_MB}MB."

    try:
        image = Image.open(io.BytesIO(image_bytes))
        width, height = image.size
        if width > config.MAX_WIDTH or height > config.MAX_HEIGHT:
            return f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º: {config.MAX_WIDTH}x{config.MAX_HEIGHT}px. –£ —Ç–µ–±—è: {width}x{height}px."
    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}"

    return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ–Ω–∞
@bot.message_handler(content_types=['photo'])
def handle_background_upload(message):
    if message.caption and message.caption.lower() == '—Ñ–æ–Ω':
        try:
            if message.photo:
                file_info = bot.get_file(message.photo[-1].file_id)
            elif message.document:
                file_info = bot.get_file(message.document.file_id)
            else:
                return
            downloaded_file = bot.download_file(file_info.file_path)
            path = f"user_backgrounds/{message.from_user.id}.png"
            with open(path, "wb") as f:
                f.write(downloaded_file)
            bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤—ã–π —Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–æ–Ω–∞")
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω: {e}")
        return
    else:
        msg = bot.send_message(message.chat.id, "üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª—è—é —Ñ–æ–Ω...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        error_msg = check_image_constraints(downloaded_file)
        if error_msg:
            bot.send_message(message.chat.id, error_msg)
            bot.delete_message(message.chat.id, msg.message_id)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model_name = user_model_choice.get(message.from_user.id, config.DEFAULT_REMBG_MODEL)
        session = new_session(model_name)

        removed_bg = remove(downloaded_file, session=session)
        no_bg_image = Image.open(io.BytesIO(removed_bg)).convert("RGBA")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ–Ω –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        user_bg_path = f"user_backgrounds/{message.from_user.id}.png"
        if os.path.exists(user_bg_path):
            background = Image.open(user_bg_path).convert("RGBA")
        else:
            background = Image.open(config.BACKGROUND_IMAGE_PATH).convert("RGBA")
        background = background.resize(no_bg_image.size)

        result_image = Image.alpha_composite(background, no_bg_image)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output = io.BytesIO()
        result_image.save(output, format="PNG")
        output.seek(0)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data='change_model'),
            types.InlineKeyboardButton("üñº –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω", callback_data='upload_bg')
        )

        bot.send_photo(message.chat.id, output, reply_markup=markup)
        bot.delete_message(message.chat.id, msg.message_id)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º!")


    

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
